---
import { urlForImage } from "@back/lib/url-for-image";
import { extractColor, cleanValue } from "@front/lib/utils";
import Link from "./Link.astro";

const {
    heading = {},
    subheading = {},
    image = {},
    orientation = "",
    link = {},
    bgColor = {},
    button = [],
} = Astro.props;

// obtener la orientación
const cleanOrientation = cleanValue(Astro.props.orientation);

// Extraer colores
const bgColorString = extractColor(bgColor);
const headingColorString = heading.headingColor ? extractColor(heading.headingColor) : "0, 0%, 7.5%";
const subheadingColorString = subheading.subheadingColor ? extractColor(subheading.subheadingColor) : "0, 0%, 30.2%";

// Valores por defecto
const headingSizeClass = cleanValue(heading.headingSize) || "heading-3";
const subheadingSizeClass = cleanValue(subheading.subheadingSize) || "fs-600";

// extraer boton 
const splitButton = Array.isArray(button) ? button : [];

// extraer los estilos de boton
//const buttonStyle = splitButton[0]?.buttonStyles?.[0] || {};

const DEFAULT_BG_COLOR = "336, 75%, 60%";
const DEFAULT_TEXT_COLOR = "0, 0%, 82.5%";
const DEFAULT_HOVER_COLOR = "312, 75%, 50%";
const DEFAULT_BORDER_COLOR = "transparent";

const buttonStyles = {
  colors: [
    {
      bgColor: extractColor(splitButton[0]?.buttonStyles?.[0].bgColor) || DEFAULT_BG_COLOR,
      textColor: extractColor(splitButton[0]?.buttonStyles?.[0].textColor) || DEFAULT_TEXT_COLOR,
      hoverColor: extractColor(splitButton[0]?.buttonStyles?.[0].hoverColor)|| DEFAULT_HOVER_COLOR ,
      borderColor: extractColor(splitButton[0]?.buttonStyles?.[0].borderColor) || DEFAULT_BORDER_COLOR,
    }
  ],
  classes: [
    {
      borderWidth: splitButton[0]?.buttonStyles?.[0].borderWidth,
      borderRadius: splitButton[0]?.buttonStyles?.[0].borderRadius,
      buttonShadowStyle: splitButton[0]?.buttonStyles?.[0].buttonShadowStyle,
    }
  ]
}

// Procesar la imagen
const imageUrl = image?.asset ? urlForImage(image.asset).url() : null;
const imageAlt = image?.alt || "Imagen sin descripción";
---
<style>

</style>

<div style={`background-color: hsla(${bgColorString})`}>
  <section class="section container">
    <article class={`split-image ${cleanOrientation}`}>
      <figure class="split-image__figure">
        {imageUrl && (
            <img
                class="border-radius-1"
                src={imageUrl}
                alt={imageAlt}
                loading="lazy"
            />
        )}
      </figure>
  
      <div class="split-image__content | flow">
        {heading && (
          <h1
            style={`color: hsla(${headingColorString});`}
            class={`${headingSizeClass}`}
          >
            {heading.text}
          </h1>
        )}
          
        {subheading && (
          <p
            style={`color: hsla(${subheadingColorString});`}
            class={`${subheadingSizeClass}`}>
              {subheading.text}
          </p>
        )}

        {splitButton.length > 0 ? (
          splitButton.map(button => (
            <Link
              link={{
                linkType: button.link?.linkType,
                href: button.link?.href,
                pageSlug: button.link?.page,
                postSlug: button.link?.post,
                openInNewTab: button.link?.openInNewTab,
              }}
              class={`button`}
              onMouseOver={`this.style.backgroundColor='hsla(${buttonStyles.colors[0].hoverColor}'`}
              onMouseOut={`this.style.backgroundColor='hsla(${buttonStyles.colors[0].bgColor}'`}
              style={`
                background-color: hsla(${buttonStyles.colors[0].bgColor});
                color: hsla(${buttonStyles.colors[0].textColor});
              `}
              role="button"
            >
              {button.buttonText && button.buttonText}
            </Link>
          ))
        ) : null}

      </div>
    </article>
  </section>
</div>